# 메인 브랜치(개발용 서버 배포)에 푸시되면 실행되는 워크플로우
# 이 테스트는 통합테스트에서 돌릴것이면 hosted runner에서 돌리는것이 맞음 (https 환경에서 정상적으로 cors문제가 해결되며 네트워크 문제가 없을 시 통합테스트를 진행하는것이 맞기때문)
# 허나, 통합테스트를 제외하고, unit test만을 실행하기때문에 깃허브 호스트러너에서 진행
name: CI - main

on:
  push:
    # 소스코드의 변경 시 실행
    #  paths: src/**
    branches:
      - 'dev'

jobs:
  # 단위 테스트
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        # node 설정
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      # 의존성 설치
      - name: Install dependencies
        run: npm ci

      # AWS 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}
      - name: Download .env.development
        run: |
          aws s3 cp ${{ secrets.AWS_S3_FE_ENV }} ./.env.local

      - name: Debug environment
        run: |
          node --version
          npm --version
          npx jest --version
          cat package.json
          echo "NODE_ENV: $NODE_ENV"

      # 단위 테스트 실행
      - name: Run unit test
        run: npm run test
      # 테스트 결과 업로드 (단위테스트 실패 시)
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure() && steps.run-unit-test.outcome == 'failure'
        with:
          name: test-results
          path: ./coverage

  build-verifaication:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ./kimprun_fe

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}
      
      - name: Download .env.production
        run: |
          aws s3 cp ${{ secrets.AWS_S3_FE_ENV_PRODUCTION }} ./kimprun_fe/.env.production

      - name: Generate commit ID
        shell: bash
        run: |
          echo "COMMIT_ID=${GITHUB_SHA::6}" >> "$GITHUB_ENV"
          echo "${GITHUB_SHA::6}" > commit-id.txt
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image - verification
        run: docker build --platform linux/amd64 -t hojipkim/kimprun_fe:${{ env.COMMIT_ID }} .
      
      - name: Upload commit ID artifact
        uses: actions/upload-artifact@v4
        with:
          name: commit-id
          path: commit-id.txt
          retention-days: 1
    outputs:
      commit_id: ${{ env.COMMIT_ID }}